openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Registers a new user
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /login:
    post:
      tags:
        - Authentication
      summary: Logs in a user
      consumes:
        - application/json
      produces:
        - application/json
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /validate_token:
    get:
      tags:
        - Authentication
      summary: Validates a JWT token
      security:
        - BearerAuth: []
      produces:
        - application/json
      responses:
        '200':
          description: Token is valid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRegistration:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: password123
        password_confirmation:
          type: string
          example: password123
      required:
        - email
        - password
        - password_confirmation
    UserLogin:
      type: object
      properties:
        email:
          type: string
          example: user@example.com
        password:
          type: string
          example: password123
      required:
        - email
        - password
    AuthToken:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      required:
        - token
    ErrorResponse:
      type: object
      properties:
        errors:
          type: array
          items:
            type: string
          example:
            - Invalid email or password
      required:
        - errors
    SuccessMessage:
      type: object
      properties:
        message:
          type: string
          example: Token is valid
      required:
        - message
